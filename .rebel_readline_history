1535668903939:(def arr (make-array String/TYPE 9))
1535668906017:arr
1535668991198:arr[0]
1535669009958:arr(0\n    \n    )
1535670256411:(map str [\n          1, 2, 3])
1535672767702:state (r/atom {:squares (make-array String/TYPE 9)})
1535672797185:let (state (r/atom {:squares (make-array String/TYPE 9)}))
1535672838781:let [\n     state (r/atom {:squares (make-array String/TYPE 9)})]
1535672865482:(ns react-tutorial.core\n    (:require\n      [reagent.core :as r]))
1535672870359:let [\n     state (r/atom {:squares (make-array String/TYPE 9)})]
1535673211882:atom a [1,2,3\n        ]
1535673213825:a
1535673219500:@a
1535673282993:(let a atom [1,2,3\n             ]\n     )
1535673299667:(def\n  a atom [1,2,3\n             ]\n     )
1535673368427:(def a (atom [1,2,3]))
1535673370246:a
1535673373109:@a
1535673501582:(swap! a assoc-in [2] 400\n       )
1535673627698:(assoc-in {:a 2 :b 3} [1] 40\n          )
1535673647796:(assoc-in {:a 2 :b 3} [b] 40)
1535673660680:(assoc-in {:a 2 :b 3} [:b] 40)
1535673821287:(assoc {:a 2 :b 3} [:b] 40)
1535673827335:(assoc {:a 2 :b 3} :b 40)
1535674053257:(def state {:squares [1,2,3]})
1535674057072:state
1535674087118:(assoc state :squares [2,3,4])
1535674139272:(assoc state :squares (assoc squares 0 2))
1535674179586:(assoc state :squares (assoc 0 2))
1535674205645:(assoc-in state [:squares 0] 2)
1535675882236:get-in state [:squares 1]
1535675891263:get-in state [:squares]
1535675908645:get state :squares
1535675913462:state
1535675917947:@state
1535675958105:(def state-test {:square [1,2,3]})
1535675962146:state-test
1535675971652:get state-test :squares
1535676015678:get-in state-test [:squares 1]
1535676044132:state-test.squares
1535676052928:state-test[squares]
1535676060193:state-test[:squares]
1535676081158:state-test[:squares 1]
1535676097386:(get-in state-test [:squares 1])
1535676103227:(get-in state-test [:squares])
1535676114080:(get state-test :squares)
1535676125019:(get state-test 1)
1535676137860:state-test
1535676158130:(atom x [1,2,3])
1535676174988:(let x [1,2,3])
1535676194451:(def x [1,2,3])
1535676197654:x
1535676201894:get x 1
1535676208547:(get x 1)
1535676236800:(def x {:a [1,2,3] :b [2,3,4]})
1535676249761:(get x :a)
1535676252449:(get x :b)
1535676261088:(get-in x [:b 2])
1536919542410:(= a 1)
1536919558353:(let [a 1])
1536919561571:a
1536919565188::a
1536919597303:(let [a 1] (prinln a)\n     )
1536919604814:(let [a 1] (println a)\n     )
1536919655968:(let [a 1] (if a (println "aa")))
1537001707051:(def a 1)
1537001708375:a
1537001715615:(def a 2\n  )
1537001717135:a
1537001815517:(def _lines (vec [1 2 3]))
1537001819461:_lines
1537001837117:(reduce + _lines\n        )
1537001963085:(reduce fn[i j] (i * j) _lines)
1537001974151:(reduce fn[i j] (* i j) _lines)
1537002240137:(reduce fn[i j] (+ i j) _lines)
1537002251591:(reduce fn[i j] (+ i j) nil _lines)
1537002283104:(reduce (fn[i j] (+ i j)) nil _lines)
1537002289058:(reduce (fn[i j] (* i j)) nil _lines)
1537002296709:(reduce (fn[i j] (* i j)) 1 _lines)
1537002307692:(reduce (fn[i j] (* i j)) 2 _lines)
1537003516280:(reduce (fn[i j] (and i j)) 2 _lines)
1537003534415:(and true false)
1537003539983:(and true true)
1537003544124:(and true nil)
1537003554751:(or true nil)
1537003572707:(+ true nil)
1537003580624:(+ 1 nil)
1537003587972:(+ "x" nil)
1537003672274:(reduce (fn[i j] (reduced i)) 2 _lines)
1537003682826:(reduce (fn[i j] (reduced i)) 2 1)
1537003703716:(reduce (fn[i j] (reduced i)) 2 [1])
1537003790698:(range 10)
1537006556559:(or 1 2)
1537007010944:(or nil 1)
1537007537384:(not 1)
1537007543454:(not 5)
1537007559304:(not nil)
1537008414925:(get @state [:squares])
1537134869749:squares
1537135021607:(last [1 2 3])
